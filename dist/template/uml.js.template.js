"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.umlJSTemplate = function () { return ("\nvar $ = go.GraphObject.make;\nmyDiagram = $(go.Diagram, \"uml\", {\n    \"undoManager.isEnabled\": true,\n    layout: $(go.TreeLayout,\n        { // this only lays out in trees nodes connected by \"generalization\" links\n            angle: 90,\n            path: go.TreeLayout.PathSource,  // links go from child to parent\n            setsPortSpot: false,  // keep Spot.AllSides for link connection spot\n            setsChildPortSpot: false,  // keep Spot.AllSides\n            // nodes not connected by \"generalization\" links are laid out horizontally\n            arrangement: go.TreeLayout.ArrangementHorizontal\n        })\n});\n\n// show visibility or access as a single character at the beginning of each property or method\nfunction convertVisibility(v) {\n    switch (v) {\n        case \"public\":\n            return \"+\";\n        case \"private\":\n            return \"-\";\n        case \"protected\":\n            return \"#\";\n        case \"package\":\n            return \"~\";\n        default:\n            return v;\n    }\n}\n\nfunction load() {\n    document.getElementById('navigation-menu').innerHTML = components.map((cmp, index) => '<li><a href=\"#' + cmp.name + '\" onclick=\"javascript:loadData(' + index + ')\">' + cmp.name + '</a></li>').join('\\n');\n    loadData(0)\n}\n\nfunction loadData(index = 0) {\n    var data = umlData[index];\n    myDiagram.model = $(go.GraphLinksModel,\n        {\n            copiesArrays: true,\n            copiesArrayObjects: true,\n            nodeDataArray: data.nodes,\n            linkDataArray: data.links,\n        });\n}\n\n// the item template for properties\nvar propertyTemplate =\n    $(go.Panel, \"Horizontal\",\n        // property visibility/access\n        $(go.TextBlock,\n            {isMultiline: false, editable: false, width: 12},\n            new go.Binding(\"text\", \"visibility\", convertVisibility)),\n        // property name, underlined if scope==\"class\" to indicate static property\n        $(go.TextBlock,\n            {isMultiline: false, editable: false},\n            new go.Binding(\"text\", \"name\").makeTwoWay(),\n            new go.Binding(\"isUnderline\", \"scope\", function (s) {\n                return s[0] === 'c'\n            })),\n        // property type, if known\n        $(go.TextBlock, \"\",\n            new go.Binding(\"text\", \"type\", function (t) {\n                return (t ? \": \" : \"\");\n            })),\n        $(go.TextBlock,\n            {isMultiline: false, editable: false},\n            new go.Binding(\"text\", \"type\").makeTwoWay()),\n        // property default value, if any\n        $(go.TextBlock,\n            {isMultiline: false, editable: false},\n            new go.Binding(\"text\", \"default\", function (s) {\n                return s ? \" = \" + s : \"\";\n            }))\n    );\n\n// the item template for properties\nvar inputsTemplate =\n    $(go.Panel, \"Horizontal\",\n        // property visibility/access\n        $(go.TextBlock,\n            {isMultiline: false, editable: false, width: 12},\n            new go.Binding(\"text\", \"visibility\", convertVisibility)),\n        // property name, underlined if scope==\"class\" to indicate static property\n        $(go.TextBlock,\n            {isMultiline: false, editable: false},\n            new go.Binding(\"text\", \"name\").makeTwoWay(),\n            new go.Binding(\"isUnderline\", \"scope\", function (s) {\n                return s[0] === 'c'\n            })),\n        // property type, if known\n        $(go.TextBlock, \"\",\n            new go.Binding(\"text\", \"type\", function (t) {\n                return (t ? \": \" : \"\");\n            })),\n        $(go.TextBlock,\n            {isMultiline: false, editable: false},\n            new go.Binding(\"text\", \"type\").makeTwoWay()),\n        // property default value, if any\n        $(go.TextBlock,\n            {isMultiline: false, editable: false},\n            new go.Binding(\"text\", \"default\", function (s) {\n                return s ? \" = \" + s : \"\";\n            }))\n    );\n\n// the item template for properties\nvar outputsTemplate =\n    $(go.Panel, \"Horizontal\",\n        // property visibility/access\n        $(go.TextBlock,\n            {isMultiline: false, editable: false, width: 12},\n            new go.Binding(\"text\", \"visibility\", convertVisibility)),\n        // property name, underlined if scope==\"class\" to indicate static property\n        $(go.TextBlock,\n            {isMultiline: false, editable: false},\n            new go.Binding(\"text\", \"name\").makeTwoWay(),\n            new go.Binding(\"isUnderline\", \"scope\", function (s) {\n                return s[0] === 'c'\n            })),\n        // property type, if known\n        $(go.TextBlock, \"\",\n            new go.Binding(\"text\", \"type\", function (t) {\n                return (t ? \": \" : \"\");\n            })),\n        $(go.TextBlock,\n            {isMultiline: false, editable: false},\n            new go.Binding(\"text\", \"type\").makeTwoWay()),\n        // property default value, if any\n        $(go.TextBlock,\n            {isMultiline: false, editable: false},\n            new go.Binding(\"text\", \"default\", function (s) {\n                return s ? \" = \" + s : \"\";\n            }))\n    );\n// the item template for methods\nvar methodTemplate =\n    $(go.Panel, \"Horizontal\",\n        // method visibility/access\n        $(go.TextBlock,\n            {isMultiline: false, editable: false, width: 12},\n            new go.Binding(\"text\", \"visibility\", convertVisibility)),\n        // method name, underlined if scope==\"class\" to indicate static method\n        $(go.TextBlock,\n            {isMultiline: false, editable: false},\n            new go.Binding(\"text\", \"name\").makeTwoWay(),\n            new go.Binding(\"isUnderline\", \"scope\", function (s) {\n                return s[0] === 'c'\n            })),\n        // method parameters\n        $(go.TextBlock, \"()\",\n            // this does not permit adding/editing/removing of parameters via inplace edits\n            new go.Binding(\"text\", \"parameters\", function (parr) {\n                var s = \"(\";\n                for (var i = 0; i < parr.length; i++) {\n                    var param = parr[i];\n                    if (i > 0) s += \", \";\n                    s += param.name + \": \" + param.type;\n                }\n                return s + \")\";\n            })),\n        // method return type, if any\n        $(go.TextBlock, \"\",\n            new go.Binding(\"text\", \"type\", function (t) {\n                return (t ? \": \" : \"\");\n            })),\n        $(go.TextBlock,\n            {isMultiline: false, editable: false},\n            new go.Binding(\"text\", \"type\").makeTwoWay())\n    );\n// this simple template does not have any buttons to permit adding or\n// removing properties or methods, but it could!\nvar headerTable = [\n    $(go.TextBlock, {\n        row: 0, columnSpan: 2, margin: 3, alignment: go.Spot.Center,\n        font: \"bold 12pt verdana\",\n        isMultiline: false, editable: false\n    }, new go.Binding(\"text\", \"name\").makeTwoWay()),\n];\nvar propertiesTable = [\n    $(go.TextBlock, \"Properties\",\n        {row: 1, font: \"italic 10pt verdana\"},\n        new go.Binding(\"visible\", \"visible\", function (v) {\n            return !v;\n        }).ofObject(\"PROPERTIES\")),\n    $(go.Panel, \"Vertical\", {name: \"PROPERTIES\"},\n        new go.Binding(\"itemArray\", \"properties\"),\n        {\n            row: 1, margin: 3, stretch: go.GraphObject.Fill,\n            defaultAlignment: go.Spot.Left, background: \"lightyellow\",\n            itemTemplate: propertyTemplate\n        }\n    ),\n    $(\"PanelExpanderButton\", \"PROPERTIES\",\n        {row: 1, column: 1, alignment: go.Spot.TopRight, visible: false},\n        new go.Binding(\"visible\", \"properties\", function (arr) {\n            return arr.length > 0;\n        }))\n];\nvar inputsTable = [\n    $(go.TextBlock, \"Inputs\",\n        {row: 3, font: \"italic 10pt verdana\"},\n        new go.Binding(\"visible\", \"visible\", function (v) {\n            return !v;\n        }).ofObject(\"INPUTS\")),\n    $(go.Panel, \"Vertical\", {name: \"INPUTS\"},\n        new go.Binding(\"itemArray\", \"inputs\"),\n        {\n            row: 3, margin: 3, stretch: go.GraphObject.Fill,\n            defaultAlignment: go.Spot.Left, background: \"lightyellow\",\n            itemTemplate: inputsTemplate\n        }\n    ),\n    $(\"PanelExpanderButton\", \"INPUTS\",\n        {row: 3, column: 1, alignment: go.Spot.TopRight, visible: false},\n        new go.Binding(\"visible\", \"inputs\", function (arr) {\n            return arr.length > 0;\n        }))\n];\nvar outputsTable = [\n    $(go.TextBlock, \"Outputs\",\n        {row: 4, font: \"italic 10pt verdana\"},\n        new go.Binding(\"visible\", \"visible\", function (v) {\n            return !v;\n        }).ofObject(\"OUTPUTS\")),\n    $(go.Panel, \"Vertical\", {name: \"OUTPUTS\"},\n        new go.Binding(\"itemArray\", \"outputs\"),\n        {\n            row: 4, margin: 3, stretch: go.GraphObject.Fill,\n            defaultAlignment: go.Spot.Left, background: \"lightyellow\",\n            itemTemplate: outputsTemplate\n        }\n    ),\n    $(\"PanelExpanderButton\", \"OUTPUTS\",\n        {row: 4, column: 1, alignment: go.Spot.TopRight, visible: false},\n        new go.Binding(\"visible\", \"outputs\", function (arr) {\n            return arr.length > 0;\n        }))\n];\nvar methodsTable = [\n    $(go.TextBlock, \"Methods\",\n        {row: 2, font: \"italic 10pt verdana\"},\n        new go.Binding(\"visible\", \"visible\", function (v) {\n            return !v;\n        }).ofObject(\"METHODS\")),\n    $(go.Panel, \"Vertical\", {name: \"METHODS\"},\n        new go.Binding(\"itemArray\", \"methods\"),\n        {\n            row: 2, margin: 3, stretch: go.GraphObject.Fill,\n            defaultAlignment: go.Spot.Left, background: \"lightyellow\",\n            itemTemplate: methodTemplate\n        }\n    ),\n    $(\"PanelExpanderButton\", \"METHODS\",\n        {row: 2, column: 1, alignment: go.Spot.TopRight, visible: false},\n        new go.Binding(\"visible\", \"methods\", function (arr) {\n            return arr.length > 0;\n        }))\n];\nmyDiagram.nodeTemplate = $(go.Node, \"Auto\", {\n            locationSpot: go.Spot.Center,\n            fromSpot: go.Spot.AllSides,\n            toSpot: go.Spot.AllSides\n        },\n        $(go.Shape, {fill: \"lightyellow\"}),\n        $(go.Panel, \"Table\",\n            {defaultRowSeparatorStroke: \"black\"},\n            ...headerTable, ...propertiesTable, ...methodsTable, ...inputsTable, ...outputsTable,\n        )\n    );\n\nfunction convertIsTreeLink(r) {\n    return r === \"generalization\";\n}\n\nfunction convertFromArrow(r) {\n    switch (r) {\n        case \"generalization\":\n            return \"\";\n        default:\n            return \"\";\n    }\n}\n\nfunction convertToArrow(r) {\n    switch (r) {\n        case \"generalization\":\n            return \"Triangle\";\n        case \"aggregation\":\n            return \"StretchedDiamond\";\n        default:\n            return \"\";\n    }\n}\n\nmyDiagram.linkTemplate = $(go.Link,\n    {routing: go.Link.Orthogonal},\n    new go.Binding(\"isLayoutPositioned\", \"relationship\", convertIsTreeLink),\n    $(go.Shape),\n    $(go.Shape, {scale: 1.3, fill: \"white\"},\n        new go.Binding(\"fromArrow\", \"relationship\", convertFromArrow)),\n    $(go.Shape, {scale: 1.3, fill: \"white\"},\n        new go.Binding(\"toArrow\", \"relationship\", convertToArrow))\n);\nload();\n\n"); };
